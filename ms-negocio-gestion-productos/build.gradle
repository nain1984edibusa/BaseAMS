plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'pe.edu.galaxy.training.java.ms.solucion.pedidos'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
 // para server-config se lo agrega a cada microservicio cliente
  	set('springCloudVersion', "2023.0.0")
 	set('springBootAdminVersion', "3.2.1")
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  
  // para server-config se lo agrega a cada microservicio cliente
  implementation 'org.springframework.cloud:spring-cloud-starter-config'
  
  // eureka cliente
   implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
  
  //dashboard
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'com.mysql:mysql-connector-j'
  annotationProcessor 'org.projectlombok:lombok'
  
  implementation('org.springframework.cloud:spring-cloud-starter-bootstrap')
   
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  
}
dependencyManagement {
  imports {
   // para server-config se lo agrega a cada microservicio cliente
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
  }
}

tasks.named('test') {
	useJUnitPlatform()
}
